<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!--ignore-unresolvable="true"  忽略解析不到的属性。解析不到不会报错  直接赋值"${}"-->
    <context:property-placeholder location="redis.properties" ignore-unresolvable="true"/>

    <!--配置连接池-->
    <bean id = "jedisPoolConfig" class = "redis.clients.jedis.JedisPoolConfig">
        <!--连接池中允许最大连接数-->
        <property name="maxTotal" value="10"/>
        <!--连接池中允许最大空闲的连接数-->
        <property name="maxIdle" value="10"/>
        <!--连接池中确保最少的空闲连接数-->
        <property name="minIdle" value="2"/>
        <!--当连接池资源用完时，调用者是否要等待   默认值为true    为true时maxWaitMillis才会生效-->
        <property name="blockWhenExhausted" value="true"/>
        <!--连接池资源用完后，调用者最大的等待时间   默认-1 表示永不超时-->
        <property name="maxWaitMillis" value="15000"/>
        <!--向连接池借资源时，是否做连接有效性检测，无效连接会被移除。默认false 任务量很大时建议设置为false(多一次ping开销)-->
        <property name="testOnBorrow" value="true"/>
        <!--向连接池归还连接时是否做连接有效性检测，无效连接会被移除。默认false-->
        <property name="testOnReturn" value="true"/>
        <!--是否开启空闲资源检测  默认false -->
        <property name="testWhileIdle" value="true"/>
        <!--空闲资源的检测周期（单位毫秒） 默认值-1  -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!--连接池中资源最小空闲时间（单位毫秒），达到此值后空闲资源将被移除   默认60*1000*30 30分钟-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!--对空闲资源做采集时，每次的采样数  默认为3   为-1时，代表对所有连接做空闲检测-->
        <property name="numTestsPerEvictionRun" value="3"/>
    </bean>



    <!--redis链接密码-->
    <bean id = "redisPassword" class="org.springframework.data.redis.connection.RedisPassword">
        <constructor-arg name="thePassword" value="123456"/>
    </bean>

    <!--连接redis的配置信息-->
    <bean id = "redisStandaloneConfiguration" class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
        <!--连接ip-->
        <property name="hostName" value="localhost"/>
        <!--连接密码-->
        <property name="password" ref="redisPassword"/>
        <!--连接端口-->
        <property name="port" value="6379"/>
        <!--选择redis数据库索引-->
        <property name="database" value="0"/>
    </bean>

    <!--构建redis工厂-->
    <bean id = "jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!--2.0以上构建jedis工厂-->
       <constructor-arg name="standaloneConfig" ref="redisStandaloneConfiguration"/>
    </bean>


    <!--简单的字符串序列化策略-->
    <bean id = "keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <!--把对象以json的形式进行存储的序列化策略-->
    <bean id = "valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>


    <!--redis操作模板     lazy-init="true"作用:SpringApplication容器启动时,当前bean不会立即初始化-->
    <bean id = "redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" scope="prototype" lazy-init="true">
        <!--配置连接工厂-->
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--指定对于普通k-v操作时key的序列化方式-->
        <property name="keySerializer" ref="keySerializer"/>
        <!--指定对于普通k-v操作时value的序列化方式-->
        <property name="valueSerializer" ref="valueSerializer"/>
        <!--指定在存储hash数据结构时，hash-key的序列化方式-->
        <property name="hashKeySerializer" ref="keySerializer"/>
        <!--指定在存储hash数据结构时，hash-value的序列化方式-->
        <property name="hashValueSerializer" ref="valueSerializer"/>
        <!--开启事务-->
        <property name="enableTransactionSupport" value="true"/>
    </bean>


    <!--专注于Strring操作的    redis模板-->
    <bean id = "stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <!--StringRedisTemplate与redisTemplate的不同，可以直接在构造器中传入ConnectionFactory-->
        <constructor-arg name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--指定对于普通k-v操作时的key的序列化方式-->
        <property name="keySerializer" ref="keySerializer"/>
        <!--指定对于普通k-v操作时的value序列化方式-->
        <property name="valueSerializer" ref="valueSerializer"/>
        <!--指定在存储hash数据结构时，hash-key的序列化方式-->
        <property name="hashKeySerializer" ref="keySerializer"/>
        <!--指定在存储hash数据结构时，hash-value的序列化方式-->
        <property name="hashValueSerializer" ref="valueSerializer"/>
    </bean>
</beans>